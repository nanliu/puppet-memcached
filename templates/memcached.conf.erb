<%
def memory_in_mb(size)
  size=~ /^([.\d]+)?[\s+]?([a-zA-Z]+)?$/

  value = $1.to_f
  unit = $2
  unit ||= ''

  case unit
  when '':
    return (value / 1024 / 1024)
  when /kB/i:
    return (values / 1024)
  when /MB/i:
    return value
  when /GB/i:
    return (value * 1024)
  when /TB/i:
    return (value * 1024 * 1024)
  else
    raise Puppet::Error "Unknown memory unit #{unit}."
  end
end
-%>
# Managed by Puppet

# Run memcached as a daemon.
-d

# pidfile
-P /var/run/memcached.pid

# Log memcached's output
logfile <%= logfile %>

# Use <num> MB memory max to use for object storage.
<% if has_variable?('memcached::max_memory') and ! max_memory.empty? -%>
-m <%= max_memory %>
<% else -%>
-m <%= (memory_in_mb(memory_size) * memory_ratio.to_f).floor %>
<% end -%>

# IP to listen on
-l <%= listen_ip %>

# TCP port to listen on
-p <%= tcp_port %>

# UDP port to listen on
-U <%= udp_port %>

# Run daemon as user
-u <%= user %>

# Limit the number of simultaneous incoming connections.
-c <%= max_connections %>

# Number of threads to use to process incoming requests.
-t <%= threads %>
